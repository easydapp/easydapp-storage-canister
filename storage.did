type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  log_visibility : LogVisibility;
  wasm_memory_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type LogVisibility = variant {
  controllers;
  public;
  allowed_viewers : vec principal;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Result = variant { Ok : text; Err : text };
service : () -> {
  admin_add : (principal) -> ();
  admin_query : () -> (vec principal) query;
  admin_remove : (principal) -> ();
  api_query : (text) -> (opt text) query;
  api_update : (text) -> ();
  canister_status : () -> (CanisterStatusResponse);
  code_query : (text) -> (opt text) query;
  code_update : (text) -> ();
  combined_increment_called : (text) -> ();
  combined_query : (text) -> (opt text) query;
  combined_update : (text) -> ();
  dapp_increment_called_by_admin : (text) -> ();
  dapp_increment_called_by_token : (text, opt text) -> ();
  dapp_query_access : (text) -> (Result) query;
  dapp_query_by_admin : (text) -> (Result) query;
  dapp_query_by_token : (text, opt text) -> (Result) query;
  dapp_update : (text) -> ();
  dapp_update_collected : (text, nat64) -> ();
  publisher_query : (text) -> (opt text) query;
  publisher_update : (text) -> ();
  wallet_balance : () -> (nat) query;
  whoami : () -> (principal) query;
}